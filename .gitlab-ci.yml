stages:
  - build_and_test
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: oriaspalacsinta
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: "2021.3.4f1"
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "1.0.1" # https://github.com/game-ci/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: "$UNITY_LICENSE != null"
      when: always

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  rules:
    - if: "$UNITY_LICENSE == null"
      when: manual
  stage: build_and_test
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.test-with-junit-reports: &test-with-junit-reports
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  script:
    # This could be made faster by adding these packages to base image or running in a separate job (and step)
    # We could use an image with these two depencencies only and only do the saxonb-xslt command on
    # previous job's artifacts
    - apt-get update && apt-get install -y default-jre libsaxonb-java
    - chmod +x ./ci/test.sh && ./ci/test.sh
    - saxonb-xslt -s $UNITY_DIR/$TEST_PLATFORM-results.xml -xsl $CI_PROJECT_DIR/ci/nunit-transforms/nunit3-junit.xslt >$UNITY_DIR/$TEST_PLATFORM-junit-results.xml
  artifacts:
    when: always
    paths:
      # This is exported to allow viewing the Coverage Report in detail if needed
      - $UNITY_DIR/$TEST_PLATFORM-coverage/
    reports:
      junit:
        - $UNITY_DIR/$TEST_PLATFORM-junit-results.xml
        - $UNITY_DIR/$TEST_PLATFORM-coverage/coverage.xml
    expire_in: 2 weeks
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

test-playmode-with-junit-reports:
  <<: *test-with-junit-reports
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT
  retry: 2

test-editmode-with-junit-reports:
  <<: *test-with-junit-reports
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: JUNIT
  retry: 2

.build: &build
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    expire_in: 3 day
    paths:
      - $UNITY_DIR/Builds/

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64
  retry: 2

build-StandaloneOSX:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneOSX
  retry: 2

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64
  retry: 2

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
